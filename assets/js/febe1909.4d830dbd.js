"use strict";(self.webpackChunkpolyproto_dot_org=self.webpackChunkpolyproto_dot_org||[]).push([[8564],{309:e=>{e.exports=JSON.parse('{"permalink":"/blog/2023/09/02/client-getting-started","source":"@site/blog/2023-09-02-client-getting-started.md","title":"Getting started with the Polyphony Client","description":"{/ truncate /}","date":"2023-09-02T00:00:00.000Z","tags":[],"readingTime":1.58,"hasTruncateMarker":false,"authors":[{"name":"bitfl0wer","description":"Lead silly individual","avatar":"https://avatars.githubusercontent.com/u/39242991?v=4","key":"bitfl0wer","page":null}],"frontMatter":{"draft":false,"date":"2023-09-02T00:00:00.000Z","categories":["polyphony","updates"],"authors":["bitfl0wer"]},"unlisted":false,"prevItem":{"title":"Porting chorus to WebAssembly + Client Update","permalink":"/blog/2023/11/23/webassembly-chorus"},"nextItem":{"title":"chorus Alpha 0.1.0","permalink":"/blog/2023/08/29/chorus-alpha"}}')},3711:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>h});var a=n(309),o=n(4848),s=n(8453);const r={draft:!1,date:new Date("2023-09-02T00:00:00.000Z"),categories:["polyphony","updates"],authors:["bitfl0wer"]},i="Getting started with the Polyphony Client",l={authorsImageUrls:[void 0]},h=[];function c(e){const t={em:"em",p:"p",source:"source",video:"video",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"{/_ truncate _/}"}),"\n",(0,o.jsxs)(t.p,{children:["Us labeling Chorus to be in a public-alpha state was really great news for me, for a lot of reasons!\nIt marked a point in Polyphonys history where, after all these months of work, we agreed upon the\nfact that what we ",(0,o.jsx)(t.em,{children:"have"})," is good enough to be shown to the public, and that's always a nice thing\nwhen investing so much of your free-time into a project. The other main reason why this is such a\ngreat thing is, because this alpha state (at least to me) means, that the public API is kind-of\nstable, or at least stable enough so that I, the project lead, can rely upon the fact that all the\npublic methods will not, in fact, be replaced in 4 days."]}),"\n",(0,o.jsxs)(t.p,{children:["This means, that I can finally start working on the Client! And I have done that! For the past 2? 3?\nDays, I've been tinkering around with Iced-rs (a really, really great UI framework for Rust, written\nin Rust) and the client repository to create the 'skeleton' of the application. While this is\ndefinitely not trivial, especially since I have ",(0,o.jsx)(t.em,{children:"no"})," prior experience in desktop application\ndevelopment, it's also not too hard either."]}),"\n",(0,o.jsx)(t.p,{children:'While Iced is not mature yet, and "how-to" guides, as well as the promised Iced-book, are still\nlargely missing, the maintainers have done a great job with providing a LOT of code examples and\nsolid rustdocs. It\'s a fun library/framework to work with, and the Elm-inspired approach of dividing\nup State, Messages, View- and Update-Logic feels really intuitive and seems to make sure that your\nApplication will never end up in an unexpected state.'}),"\n",(0,o.jsx)(t.p,{children:"That's all I have for today. Thanks for reading this! Here's a video of multi-user login already\nworking ^^"}),"\n",(0,o.jsxs)(t.video,{controls:!0,width:"auto",children:["\n    ",(0,o.jsx)(t.source,{src:"https://cloud.bitfl0wer.de/index.php/s/Gd556SnwAQYejYw/download/screenrec.mp4"}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>i});var a=n(6540);const o={},s=a.createContext(o);function r(e){const t=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);