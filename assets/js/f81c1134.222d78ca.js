"use strict";(self.webpackChunkpolyproto_docs=self.webpackChunkpolyproto_docs||[]).push([[8130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"/2025/02/12/governing-polyproto","metadata":{"permalink":"/blog/2025/02/12/governing-polyproto","source":"@site/blog/2025-02-12-governing-polyproto.md","title":"Governing polyproto","description":"There\'s precedence which suggests that governing federated software as a one-man-band is a bad idea. This begs the question: How would polyproto be governed?","date":"2025-02-12T00:00:00.000Z","tags":[],"readingTime":3.285,"hasTruncateMarker":true,"authors":[{"name":"bitfl0wer","description":"Lead silly individual","avatar":"https://avatars.githubusercontent.com/u/39242991?v=4","key":"bitfl0wer","page":null}],"frontMatter":{"date":"2025-02-12T00:00:00.000Z","draft":false,"categories":["polyproto"],"authors":["bitfl0wer"],"title":"Governing polyproto"},"unlisted":false,"nextItem":{"title":"NLnet grant application","permalink":"/blog/2024/10/14/nlnet-grant-application"}},"content":"There\'s precedence which suggests that governing federated software as a one-man-band is a bad idea. This begs the question: How would polyproto be governed?\\n\\n{/* truncate */}\\n\\n## I am in a somewhat interesting situation.\\n\\nPolyphony and polyproto are, at the moment, \\"just hobbies\\" for me. However, I *do* still really want this all to succeed long-term. These wishes do involve a lot of planning ahead, including thinking about passing on the torch, so that this fire does not die with me. A pretty uncommon thing to say about a hobby, I think.\\n\\nIt is pretty clear to me that I do not want to be the sole ruler of all things polyproto. I simply don\'t have the time, energy and skills to manage everything myself, should polyproto really become something that is used by a larger audience. polyproto must be an open standard, and in my opinion, to make a standard truly open is to eventually let go and involve other people in decision making processes. This is what I have been thinking about a lot lately, and I wanted to use this article as a space to share my thoughts and wishes for the future.\\n\\n## Democracy!\\n\\nTo make a long story short, I believe that establishing a non-profit foundation or association that concerns itself with governing and developing polyproto is *the* way to go. The tasks of such an association would be:\\n\\n- **Coordinating and overseeing work on the protocol:** As the polyproto sees increased usage, changes and additions to the core protocol will most definitely need to be made to align the protocol with real-world needs and wants voiced by users and developers alike. The polyproto association would have the final say over what changes will be included in the next version of polyproto by reviewing, commenting on and accepting/rejecting change proposals submitted by people/groups.\\n- **Foster a collaborative environment:** I believe it would really *suck* if there were 12 (exaggeration) different p2-extensions defining what a Discord-like chat application should look like. The polyproto association should make efforts to foster, unify and certify \\"official\\" extensions and standards that all developers should use. I am not 100% sure about what this would look like; Imagine, someone develops a p2-extension defining what a Google Photos-like should look like. This person now comes to the polyproto association with a wish to get a \\"seal of approval\\" via getting their extension certified. The association members notice, that this extension is pretty awesome. What happens now? Should this extension be \\"absorbed\\" into the association somehow? Should only this exact version of the extension receive certification, requiring the developer to contact the association again if an update to the extension is made, to get the updated version certified as well? And if this is the case, say there happens to be a disagreement between the association and the developer on the contents of the extension update \u2013 what then? Does the association eventually \\"hard fork\\" the extension? This seems very complex, and I think that cases like these should be considered, given that sadly not every human being gets along with each other. In any case, the polyproto association should make the process of getting your extension proposal reviewed and seen by other people easier, so that extensions are not created in a vacuum, but through *collaboration*.\\n- **Act as a giant documentation resource:** The association should be a great source of information for interested developers. Documentation and explanations of concepts should be available in various levels of complexity and should always be up-to-date.\\n\\n## Closing words\\n\\nThe time for something like this has not yet arrived. What this project needs in its infancy is rapid development and the freedom to change a great number of things quickly.\\n\\nWhat I need *right now* though is to get healthy again. As I am writing this, the flu is still doing a number on me. Bleh.\\n\\nStay healthy and stay safe!"},{"id":"/2024/10/14/nlnet-grant-application","metadata":{"permalink":"/blog/2024/10/14/nlnet-grant-application","source":"@site/blog/2024-10-14-nlnet-grant-application.md","title":"NLnet grant application","description":"The NLnet foundation is a non-profit organization that supports open-source projects. They have a","date":"2024-10-14T00:00:00.000Z","tags":[],"readingTime":11.515,"hasTruncateMarker":true,"authors":[{"name":"bitfl0wer","description":"Lead silly individual","avatar":"https://avatars.githubusercontent.com/u/39242991?v=4","key":"bitfl0wer","page":null}],"frontMatter":{"date":"2024-10-14T00:00:00.000Z","categories":["polyproto","updates"],"authors":["bitfl0wer"],"title":"NLnet grant application"},"unlisted":false,"prevItem":{"title":"Governing polyproto","permalink":"/blog/2025/02/12/governing-polyproto"},"nextItem":{"title":"polyproto extensions","permalink":"/blog/2024/06/01/extensions"}},"content":"The [NLnet foundation](https://nlnet.nl/) is a non-profit organization that supports open-source projects. They have a\\ngrant program that funds projects that align with their goals. On behalf of Polyphony and the\\npolyproto project, I have submitted an application for a grant of 10,000\u20ac from the NLnet foundation\\nin their funding round of October 2024.\\n\\n{/* truncate */}\\n\\nShould we be successful in our application, the grant will be used to fund the development of the\\nPolyphony and polyproto projects, which would rapidly increase the development velocity of both\\nprojects and bring them one big step closer to being ready for a public alpha release.\\n\\nThe application required a bunch of different, interesting questions to be answered. I would like\\nto share the answers with you, as they give a good overview of what we are working on, what we\\nare planning to do, and considerations we have made in the past.\\n\\n## Can you explain the whole project and its expected outcome(s)?\\n\\npolyproto is a new federation protocol with the goal of offering account portability and an effortless experience for users and developers alike.\\nIt is part of the Polyphony Project, which aims to be a truly competitive alternative to centralized, proprietary chat services like Discord.\\nWe came up with the idea for polyproto because of a lingering frustration with current federation protocols and their sub-optimal suitability for\\nsuch a project.\\n\\npolyproto is not limited to an application in a chat service, and that it is not incompatible with federation protocols\\nsuch as ActivityPub. It would technically be possible to write a polyproto + ActivityPub server and client to offer new possibilities to the\\ncurrently existing Fediverse. We want to empower users, not split userbases further.\\n\\nOur goal is to deliver the Polyphony chat service with polyproto at its core, build great SDKs for other developers to work with, and to also directly\\nwork together with other developers to get alternative implementations of polyproto-based chat services for users to choose from. Polyphony\\nshould be the ideal, federated and decentralized Discord replacement; a service, that can be used by teenagers, the elderly and anyone in\\nbetween and which ideally does not require any additional technical knowledge or proficiency to use.\\n\\nDocumentation/Protocol specification:\\nhttps://docs.polyphony.chat/Protocol%20Specifications/core/\\nSimplified overview of the protocol (sadly a little dated, but it can give an overview of the basics nonetheless):\\nhttps://docs.polyphony.chat/Overviews/core/\\nAPI Documentation:\\nhttps://docs.polyphony.chat/APIs/core/\\n\\"polyproto-rs\\" Rust crate:\\nhttps://github.com/polyphony-chat/polyproto-rs\\nPolyphony organization overview:\\nhttps://github.com/polyphony-chat\\n\\"chorus\\" API Wrapper for Discord, Spacebar-Chat (formerly \\"Fosscord\\") and our own server:\\nhttps://github.com/polyphony-chat/chorus\\n\\n## Have you been involved with projects or organisations relevant to this project before? And if so, can you tell us a bit about your contributions?\\n\\nI (Flori Weber, bitfl0wer) have been following the Spacebar-Chat (formerly \\"Fosscord\\") project for some time before deciding to start the\\nPolyphony-Chat GitHub organization in March 2023. The contributions I have made to the Spacebar project were limited to additions and overhauls\\nof the projects documentation, because of a lack of TypeScript knowledge, which is the programming language primarily used in the Spacebar\\norganization. Of course, I have prior experience in software development and software design through my work at Deutsche Telekom MMS GmbH,\\nbut this is my first project with such a topic. I am part of a software development community called \\"Commune\\", which is a home for individuals\\nand groups who also have interest in federated and/or decentralized social media, as well as \\"reclaiming\\" the web from the hands of large\\ncorporations. There, I have access to like-minded individuals who are also very much interested in polyproto and in seeing polyproto succeed.\\n\\n## Requested Amount\\n$10.000\\n\\n## Explain what the requested budget will be used for? Does the project have other funding sources, both past and present?\\n\\nThere are three key things that I (Flori Weber, bitfl0wer) have been wanting to tackle for months now, but have never been able to do, because of\\na lack of available personal time or expertise. These three things are:\\n\\n1. Writing new material and, if necessary, reworking existing material that\\n\\t- Describes, in a condensed form, what polyproto is about, targeted towards people who do not have [a lot of] existing knowledge in the topics of\\n\\t  federation and decentralized social networking concepts ($250-400)\\n\\t- Describes, in a condensed form, how polyproto works, targeted towards developers who might be interested in learning more about the inner\\n\\t  workings of polyproto, without needing to read the entire protocol specification document ($250-400)\\n2. Starting to build some sort of \\"brand\\" by\\n\\t- Commissioning an artist to create a recognizable logo for polyproto ($200-400)\\n\\t- Commissioning a frontend developer to build a landing page for our project, since non-developers do seem to prefer information hosted outside\\n\\t  of GitHub and plain looking documentation pages. This landing page would also host the written material mentioned in 1. ($500-1500)\\n3. Paying (freelance) developers to expedite this projects\' journey to completion, where there are the following tasks we could use additional brains on:\\n\\t- Paying developers to start integrating our polyproto crate into our \\"chorus\\" client library and \\"symfonia\\" server (~$2000)\\n\\t- Stabilizing and extending the symfonia server to host a first, publicly usable instance (~$1500)\\n\\t- Getting additional help from UI/UX designers and frontend developers to build a client mockup, then having this mockup translated into\\n\\t  a client prototype which can be hosted alongside the symfonia server (~$2000)\\n\\t- \\"Overhaul\\"/Refactoring tasks which we, as a group of mainly university students working part time jobs in addition, simply did not yet have the\\n\\t  time to get to (~$1000-1500)\\n\\nThis would total to $7700 or $9700, depending on whether the lower or higher estimate is used.\\nAdditionally, I would like to extend the domains polyphony.chat and polyproto.org for some years using the funding and top up our prepaid E-Mail\\nserver hosted at https://uberspace.de/en/. The domain and the E-Mail server make up most of our current operating costs, ranging between 7-12$ a month.\\nThis might not sound like a lot in the grand scheme of things, but I am currently paying for these out of my own pocket as an undergraduate with\\nlittle income, so being able to potentially reduce monthly expenses is a nice prospect.\\n\\nWe currently have and have never had additional/other sources of funding. Receiving funding from NLNet would thus be our first source of funding.\\n\\n## Compare your own project with existing or historical efforts.\\n\\n### Spacebar Chat\\n\\nAlready previously mentioned, Spacebar Chat is also working on an open-source Discord replacement in form of offering an API-compatible server.\\nHowever, they do not seem interested in making Spacebar Chat a federated chat application with good user experience, as their primary focus\\nis to reverse-engineer and re-implement the Discord API spec-for-spec.\\n\\nFrom talking to Spacebar Maintainers, their code reportedly seems to have accrued noticeable amounts of technical debt which made it undesirable\\nfor most of the maintainers to continue development on the server. Being friends with some of the now mostly inactive maintainers, I have\\nconsidered forking the server repository to have an already mostly working starting ground to work with. However, due to the reports of\\ntechnical debt and our organizations\' unfamiliarity with JavaScript/TypeScript, we have decided to start from scratch, in Rust.\\n\\nThe accumulated knowledge that Spacebar contributors and maintainers have collected in form of documentation has already been of great use\\nfor our project, and we are contributing back by updating documentation and creating issues, when we find disparities between the behaviours of\\nour own server implementation and their server implementation.\\n\\n### XMPP\\n\\nMuch like XMPP, I have decided to make polyproto an extensible protocol.\\n\\nI am of the opinion that XMPPs biggest downfall is how many extensions there are, and that a server aiming to be compatible with other\\nimplementations of XMPP-based chat services should aim to implement all of the XEPs to be a viable choice.\\n\\npolyproto is actively trying to circumvent this by limiting polyproto extensions (P2 extensions for short) to\\n\\n- either be a **set** of APIs and behaviours, defining a generic(!) version of a service. A \\"service\\" is, for example, a chat application,\\n  a microblogging application or an image blogging application. Service extensions should be the core functionality that is universally needed\\n  to make an application function. In the case of a chat application, that might be:\\n\\n  - Defining message group size granularity: Direct messages, Group messages, Guild-based messages\\n  - Defining what a room looks like\\n  - Defining the APIs and behaviours required to send and receive messages\\n  - Defining the APIs and behaviours required to perform commonly sought after things, such as reacting to a message with an emoji\\n  - etc.\\n\\n  The goal is that all different polyproto-based chat applications should then implement this shared behaviour. Of course, developers\\n  may absolutely add their own behaviours and functionality which is perhaps exclusive to their specific implementation. Core\\n  functionality remains commonly defined however, which should make all polyproto-based chat applications interoperable in these\\n  defined, common behaviours.\\n\\n- or describe a **major** technological addition, which can be used in the \\"requires\\" section of another P2 extension. This \\"requires\\"\\n  section can be thought of like the dependency list of a software package.\\n\\n  Technological additions might be:\\n  - Defining APIs and behaviours needed to implement the MLS (Messaging Layer Security) Protocol\\n  - Defining APIs and behaviours needed to establish and maintain a WebSocket connection, and how to send/receive messages over this\\n    WebSocket connection.\\n\\nBy using clay-brick-sized building blocks instead of more LEGO-sized building blocks like XMPP does, we hope to mitigate this problem\\nthat we perceive, while still offering an extensible yet well-defined platform to build on.\\n\\n### Matrix/Element\\n\\nMatrix is perhaps the closest we have yet gotten to federated chat software aimed towards a general audience. However, as a strong\\nbeliever in user experience - especially how first impressions impact new, non-technical users, I believe that Matrix falls flat in this\\nregard. A lot of peoples first experience with Matrix is the infamous \\"Could not decrypt: The senders device has not yet sent us the keys\\nfor this message\\". The protocol and its sub-protocols are vast and complicated and use bespoke cryptography protocol implementations such\\nas Olm and Megolm, which, in the past, has already been the cause of high-caliber vulnerabilities (see: https://nebuchadnezzar-megolm.github.io/\\nand, more recently, https://soatok.blog/2024/08/14/security-issues-in-matrixs-olm-library/#addendum-2024-08-14).\\n\\nMatrix is truly impressive from a technical standpoint. Its extremely low centralized architecture fills a niche which especially\\npeople already interested in technology seem to enjoy. However, this invariably results in the fact that user experience has to be\\ncompromised. It is of my opinion that while Matrix is relatively good at what it is doing, it is not a good fit to be a potential\\nDiscord replacement.\\n\\nAs for a comparison: We are taking a radically different approach to Matrix. Matrix aims for eventually-consistent federation of events\\nusing cryptographically fully verifiable directed acyclic event graphs, where as polyproto, and by extension Polyphony, prioritize\\nusability above all, intentionally disregarding highly complex or novel data structures in favor of cryptographic verifiability\\nthrough digital signatures and simple public key infrastructure.\\n\\n## What are significant technical challenges you expect to solve during the project, if any?\\n\\nCurrently, our trust model acknowledges, that a users home server is able to create sessions and session tokens on the users\' behalf,\\nand is thus able to listen in on unencrypted communications, or, in the case of a truly malicious admin, would even be able to send messages\\non behalf of the user. This is not a novel problem, as it also affects all Mastodon ActivityPub servers in existence. Given that this\\npotential abuse risk has not been a large issue in the Fediverse, we expect this to also not be a major problem. However, I would like\\nto find additional mitigations or even a solution for this problem during further development of polyproto.\\n\\nAnother area that will likely need more work is my current design for how to connect to multiple servers at once: Currently, I expect\\nevery client to hold a WebSocket connection with each server that they are communicating with, at once. Depending on the amount of traffic,\\nthis could lead to constantly high resource consumption for clients. If this turns out to be the case, I am sure that we can find plenty\\nof software- and protocol-side adjustments and improvements to implement - though it is still a potential technical challenge.\\n\\nMy last major area of concern is how well transmission and de-/serializing of the X.509 based Identity Certificates will work. I am optimistic\\nabout this however, since the X.500 series of RFCs are extremely well documented and already deeply explored, so that even if challenges\\narise in this area, I am certain that there is enough literature on the exact problem we might be facing, and enough people to ask/talk to.\\n\\n## Describe the ecosystem of the project, and how you will engage with relevant actors and promote the outcomes?\\n\\nAs the commercialization of Discord.com steadily increases, it is becoming clear that people are looking for a usable alternative.\\nThis is an audience that we are hoping to capture. Our Polyphony Chat service is Discord API compatible, so that actors may use\\nthe Polyphony client to interact with both Discord.com and polyproto-chat-based instances, and that existing bots and automations\\ncould potentially be ported over very easily. This essentially gives people looking for a Discord replacement exactly what they\\nare looking for, as there should be little to no additional concepts, behaviors or patterns that users have to learn or\\nre-learn to use our service.\\n\\nAs previously touched on, we are blessed to already have made a great amount of connections to like-minded developers also working\\non similar projects, who are looking optimistically towards polyproto as the tool to use to federate. I also have received explicit\\npermission from Spacebar Maintainers to promote our projects on their Discord Guild, which currently counts 3600 members."},{"id":"/2024/06/01/extensions","metadata":{"permalink":"/blog/2024/06/01/extensions","source":"@site/blog/2024-06-01-extensions.md","title":"polyproto extensions","description":"polyproto is a new federation protocol. Its main focus is enabling seamless participation of one","date":"2024-06-01T00:00:00.000Z","tags":[],"readingTime":5.815,"hasTruncateMarker":true,"authors":[{"name":"bitfl0wer","description":"Lead silly individual","avatar":"https://avatars.githubusercontent.com/u/39242991?v=4","key":"bitfl0wer","page":null}],"frontMatter":{"date":"2024-06-01T00:00:00.000Z","categories":["polyproto"],"authors":["bitfl0wer"],"title":"polyproto extensions"},"unlisted":false,"prevItem":{"title":"NLnet grant application","permalink":"/blog/2024/10/14/nlnet-grant-application"},"nextItem":{"title":"Work on polyproto and a \\"vacation\\" \u26f1\ufe0f","permalink":"/blog/2024/03/06/updates-and-vacation"}},"content":"polyproto is a new federation protocol. Its main focus is enabling seamless participation of one\\nactor on many different servers. The core specification lacks routes for sending any sort of user\\ngenerated data anywhere, though. What is up with that?\\n\\n{/* truncate */}\\n\\n## To federate is to be familiar\\n\\nIf any application wants to participate in the network of polyproto services, it has to speak the\\nsame language as those other services. When wanting to send a message to a server that you are\\nauthenticated on, your client needs to know exactly what that HTTP request has to look like. This\\nis nothing new. One take on a solution for this problem stems from the people working on the\\nATProtocol, who created [Lexicon](https://atproto.com/guides/lexicon). From the atproto website:\\n\\n!!! quote \\"Lexicon TL;DR\\"\\n\\n    Lexicon is a global schema system. It uses reverse-DNS names like \\"`com.example.ping()`\\". The\\n    definitions are JSON documents, similar to JSON-Schema. It\'s currently used for HTTP endpoints,\\n    event streams, and repo records\\n\\nThe core of polyproto is supposed to be infinitely adaptable, to be flexible enough to be used for\\njust about anything, which is why I do not want to force a fixed set of routes onto every single\\npolyproto implementation.\\n\\nLexicon sounds interesting and really versatile! However, as mature as the idea itself might be, it\\nis pretty complex and does not yet seem to have good community support in the form of\\nlibraries/crates to aid in working with this new schema system. I also do not want to force polyproto\\nintegrations to use a (potentially very complex) Lexicon parser and dynamic routing system\\nthingymajig - although having \\"no rules\\" means, that if you *want* to build a polyproto service\\nwhich uses Lexicon, you absolutely can.\\n\\n## We need a common foundation\\n\\nI am a big proponent of defining a set of (mutually independent) protocol extensions, which include\\nadditionally needed behavior and concrete HTTP routes for building a specific application. This has the following benefits:\\n\\n- If you\'d like to build a polyproto chat client, and there\'s a polyproto-chat extension, you\\n  simply need to add the additional things required by that extension. No need for complex parsing! Code only what you need and do not care about the rest.\\n- Mutual independence means being able to combine extensions however you\'d like. You could, for\\n  example, create a chat app with integrated microblogging functionality.\\n- Developers are free to come up with whatever they want. How about ActivityPub x polyproto? Since\\n  polyproto doesn\'t define a message format, this is absolutely possible!\\n- Simplicity! polyproto and its \\"official\\" extensions will always just have plain old REST APIs,\\n  for which tooling is readily available. Why bother with something fancy and dynamic, when this\\n  does the trick?\\n\\nOn the other hand, everyone now has to agree on one extension to use for a specific application. You\\ncannot participate on servers, which have use an extension which is completely different from the one\\nthat your client implements, as an example.\\n\\n## ...the *polyproto* foundation. Get it? *sigh*\\n\\nTo develop, provide and maintain polyproto and some major \\"official\\" extensions (such as polyproto-chat),\\ncreating a non-profit foundation is likely a good idea for a future where polyproto is actually being\\nused in the real world.\\n\\nThis could sort of be seen like the XMPP Standards Foundation which develops and maintains XMPP\\nextensions. Unlike XMPPs extensions however, official polyproto extensions should always be *major*\\nadditions in functionality. As an example: [XEP-0084](https://xmpp.org/extensions/xep-0084.html) is\\nthe official XMPP extension for User Avatars. An entire 12 point document, which describes one simple\\nfeature!\\n\\npolyproto extensions should either always be a major technological addition, which can be taken\\nadvantage of by other extensions (examples for this would be WebSocket Gateways and\\nMessaging Layer Security), or a document describing a **set** of routes, which define a particular\\napplication use case (A Discord-like, a Reddit-like, a Twitter-like, and so on). Having official\\nextensions adhere to these rules ensures that polyproto will not become a cluttered mess of\\nextensions and that it and its extensions are easy to understand and implement, due to less\\ndocumentation having to be read and written.\\n\\n## Is this a bottleneck for me as a developer\\n\\nIf you are a developer, you might ask yourself:\\n\\n!!! question\\n\\n    Implementing common chat behaviour sounds cool in terms of intercompatibility, but doesn\'t this\\n    limit what I can do with my application? I have planned for a cool feature X to exist in my chat\\n    service, but that doesn\'t exist in the protocol extension!\\n\\nExtensions should be a usable minimum of common behavior that all implementations targeting the\\nsame \\"class\\" of application must share. Implementations can absolutely offer all the additional\\nspecial/unique features they\'d like, though. polyproto clients implementing the same extensions\\ncan be treated as clients with a reduced feature set in this case. What is crucial, however, is\\nthat the additional features do not prohibit \\"reduced feature set clients\\" from using the behavior\\ndescribed in the extension, if any sort of federation or interoperability is wanted.\\n\\n!!! example \\"What works\\"\\n\\n    In your implementation of a chat service, users can send each other messages with special\\n    effects, such as fireworks, confetti and similar. A different implementation of polyproto-chat\\n    is unlikely to see these special effects on their end. However, they can still see the messages\'\\n    text contents, send replies to the message, and do all sorts of other things as described in\\n    this hypothetical polyproto-chat extension.\\n\\n!!! example \\"What doesn\'t work\\"\\n\\n    In your implementation of a chat service, users can send each other messages with special effects,\\n    such as fireworks, confetti and similar. Your implementation requires every client to send\\n    information about the special effect they\'d like to send with a message - otherwise sending the\\n    message fails. If this is the case and you haven\'t implemented a sort of \\"adapter\\" for other\\n    polyproto-chat clients, these clients will not be able to send any messages to servers running\\n    your chat software. This conflicts with the behaviour required by the polyproto-chat extension\\n    and is therefore unacceptable.\\n\\nAlso keep in mind that through clever engineering, it might be possible to write adapters for\\nbehavior, which should be required in your implementation and conflicts with the base extension.\\nPicking up the \\"What doesn\'t work\\" example again, the implementer could simply \\"translate\\" message\\nsending requests made to the polyproto-chat endpoints and add the required \\"special effects\\"\\ninformation, stating that messages sent through polyproto-chat endpoints have no special effects\\nadded to them.\\n\\n## Closing words\\n\\nI am of the opinion that, while this way of having extensions might not be the most technologically\\nadvanced solution, it certainly offers many possibilities while being easy to understand and\\nimplement.\\n\\nThese are my current plans, ideas and thoughts for making a v1 of polyproto extensible. If you have\\nany thoughts on this matter, please do let me know! You can contact me via\\n[email](mailto:flori@polyphony.chat) or by writing a message on our [Discord](https://discord.com/invite/m3FpcapGDD).\\n\\nThank you for reading! :>\\n\\n# Happy pride month! \ud83c\udff3\ufe0f\u200d\ud83c\udf08\ud83c\udff3\ufe0f\u200d\u26a7\ufe0f\ud83d\udc9b\ud83e\udd0d\ud83d\udc9c\ud83d\udda4"},{"id":"/2024/03/06/updates-and-vacation","metadata":{"permalink":"/blog/2024/03/06/updates-and-vacation","source":"@site/blog/2024-03-06-updates-and-vacation.md","title":"Work on polyproto and a \\"vacation\\" \u26f1\ufe0f","description":"In this little update post I write about what I\'ve done in the last couple of weeks alongside talking about taking just a little break","date":"2024-03-06T00:00:00.000Z","tags":[],"readingTime":7.02,"hasTruncateMarker":true,"authors":[{"name":"bitfl0wer","description":"Lead silly individual","avatar":"https://avatars.githubusercontent.com/u/39242991?v=4","key":"bitfl0wer","page":null}],"frontMatter":{"date":"2024-03-06T00:00:00.000Z","categories":["polyproto","updates"],"authors":["bitfl0wer"],"title":"Work on polyproto and a \\"vacation\\" \u26f1\ufe0f"},"unlisted":false,"prevItem":{"title":"polyproto extensions","permalink":"/blog/2024/06/01/extensions"},"nextItem":{"title":"X.509 in polyproto","permalink":"/blog/2024/02/19/x509-in-polyproto"}},"content":"In this little update post I write about what I\'ve done in the last couple of weeks alongside talking about taking just a little break\\n(don\'t worry, y\'all are not getting rid of me!)\\n\\n{/* truncate */}\\n\\nIt\'s been more or less two weeks since the last post - time for the next one!\\n\\nA good amount of commits have been since the [X.509 in polyproto](https://docs.polyphony.chat/blog/2024/02/19/x509-in-polyproto/) was\\npublished. Let\'s break them down a little, shall we?\\n\\n---\\n\\n## Certificate Signing Requests\\n\\nThe polyproto crate can now be used to create very basic - but to the best of my knowledge fully RFC compliant - Certificate Signing\\nRequests! This is cool, because Certificate Signing Requests are how all Actors (Users) in polyproto will request a Certificate\\nfrom their home server. The generated CSRs can be fully verified using the OpenSSL/LibreSSL CLIs, which is very important, as these\\ntwo applications are the industry standard when it comes to working with cryptographic standards like X.509.\\n\\nSpecifically, polyproto uses the well-defined [PKCS #10 standard](http://www.pkiglobe.org/pkcs10.html) to pack up and transport all\\nthe needed CSR information to your future home server.\\n\\nThe next steps here are:\\n\\n- Creating validators for the information supplied in the CSRs\\n- Implementing methods to create an ID-Cert from a CSR\\n- Write great documentation for what exactly the data inside of the ID-CSR has to look like to be valid\\n\\n...and as you might have already guessed, I am already working on all of these things! :) They just take time:tm:\\n\\n---\\n\\n## Cleaning up\\n\\nAs fun as designing APIs and software architecture is for me, I don\'t yet always get all of it right on the first try. This is fine\\nthough, as long as you recognize the mistakes you\'ve made, learn from them and clean the mess you\'ve made.\\n\\nI noticed that, as well-meant as some of the traits and trait bounds I\'ve added, they made implementing polyprotos\' base types and\\ntraits a lot harder than needed. I\'ve been chipping away at the unnecessary and redundant bits, removing some of these traits entirely.\\n\\n---\\n\\n## Updating the specification document\\n\\nI really wanted to get started on a reference polyproto implementation *before* finishing the specification document. This might seem\\na little counter intuitive, but my thought process was, that implementing the crate in code would force me to think about everything\\nfrom scratch again, which would make it much easier to spot mistakes I potentially made when writing the specification documentation.\\nThese mistakes would primarily be:\\n\\n- Information that is there, but unimportant\\n- Information that is important, but not there\\n- Information that is important, there, but wrong\\n\\nThis turned out to be right. I have added a lot of \\"TODO\\"s and \\"FIXME\\"s into the specification document since started working on the\\npolyproto crate. All of these TODOs have since been worked on and removed! This doesn\'t mean that the specification document is now\\nperfect, but it\'s already better than before, and it\'ll only get better as I continue to work on the crate!\\n\\nAnother, notable thing that happened is *removing the auth-part from the core polyproto protocol*! You might be thinking \\"whaaaat?\\ndoes that mean that there will be no authentication in polyproto??\\" but I can assure you, that that\'s not what this means. Removing\\nthe authentication endpoints from the core protocol means that polyproto extensions can now choose authentication technologies and\\nmethods for themselves, instead of being forced to implement a bunch of REST-based authentication endpoints they might not even want\\nor use anyways.\\n\\nI would like to thank `@laxla@tech.lgbt` for this idea! :> Collaboration and feedback are truly great things, and I am happy to have such\\na nice group of people on Discord and Matrix who are genuinely interested in the silly thing I/we want to do with Polyphony and\\npolyproto :)\\n\\n---\\n\\nNow for the perhaps biggest and probably most important announcement:\\n\\n## Taking a little break for my silly mental health\\n\\n---\\n\\nIt just dawned on me that March 8th marks the one year anniversary of Polyphony!! That\'s genuinely so cool, and means that this is\\nthe project I have worked on the longest for, out of all of my personal projects.\\n\\nSo yeah - it\'s been almost a year now! And not a lazy one for me, either.\\n\\n![bitfl0wer\'s (mine) commit graph for the past year. A lot of green squares, signalling a lot of commits/activity that has been made. The text above the graph reads: \\"2,858 contributions in the last year\\"](./media/2024-03-05-commit_graph.png)\\n\\n!!! warning \\"Content warning\\"\\n\\n    The following paragraph covers the topics of anxiety and depression. If you would not like to read about this, feel free to\\n    scroll down until you see a big green box with a check mark. The box indicates that it is safe for you to read again!\\n\\nBig shocker: I am \ud83d\udc7b\ud83d\udc7b\ud83d\udc7b\ud83d\udc7b depreeeeeeessed \ud83d\udc7b\ud83d\udc7b\ud83d\udc7b\ud83d\udc7b\ud83d\udc7b, and have been for the past... 4-6 years of my life. In that time, I have experienced\\nthe absolute lowest points of my life. Luckily, I have the absolute privilege to have a great therapist who I have been with for 2 years\\nnow, and I am also on medication which already does a good job (most of the time) at taking the edge off the depression.\\n\\nAs it has been explained to me by my therapist, medication should only be a crutch, though. It should not be the tool you should solely\\nrely on for the rest of your life to deal with extreme (social) anxiety and depression. Other, non-medication-related options should\\nbe tried, to potentially get you to stop having to take medication to feel non-completely-absolutely-positively-awful every day.\\n\\nOne of these options is therapy, and, as I\'ve mentioned, I\'ve already been doing that for 2+ years now. It has helped me a great, great\\ndeal already, and I can absolutely encourage anyone reading who is feeling similarly to how I\'ve described and who is in the lucky position\\nto get (or at least be put on a waiting list for) therapy, to take the first step. It isn\'t easy; it can actually feel really really scary\\nat first. But do believe me when I say that a good therapist can absolutely help you to get better.\\n\\nBut one hour of therapy a week can sadly only do *so* much. This is why I, with the encouragement of my friends, loved ones\\n(particularly my lovely, lovely girlfriend) and my therapist, have decided to admit myself into a mental health clinic that specializes\\nin the treatment of depression, anxiety disorders and the like.\\n\\n!!! success \\"Safety checkpoint reached!\\"\\n\\n    It\'s now over! :)\\n\\nStarting on March 20th, I will be leaving my everyday life, my girlfriend, my\\nfriends, laptop, work, personal projects and everything else behind to go there, and hopefully leave a good bad part of me behind when I come back.\\n\\nThe clinic is far away though, and leaving absolutely everything behind for a month or possibly a little longer is really, really scary\\nto me. However, I think and hope that the metaphorical plunge into icy water will be worth it for me and my mental health.\\n\\nWhen I come back, I\'ll be better than I was before, which will also mean that I can hopefully be more happy and productive in all aspects of\\nmy life, including Polyphony.\\n\\nIf you\'re reading this on or after March 20th, then see you on the other side :) I hope the grass is greener there!\\n\\n!!! quote \\"BEGPOSTING ON MAIN\\"\\n\\n    I am lucky and extremely privileged to have been growing up in Germany, a country with a (mostly) functioning social welfare system and universal health care.\\n    If this wasn\'t the case, I\'d likely be absolutely unable to afford to put myself into such good care. Germany doesn\'t pay for everything though, and the\\n    train rides to and from the clinic will likely be expensive for me, as will the 10\u20ac daily fee for staying at a clinic (capped at 280\u20ac).\\n\\n    I can currently afford this without financially ruining myself, so don\'t worry about that. However, this whole endeavour will take a good chunk out\\n    of my current savings. Thus, if you\'d like to [donate to my ko-fi](https://ko-fi.com/bitfl0wer) to help me cover the costs, it would mean a lot to me! \\\\<3\\n\\n    Please only do so if you are in a stable financial standing yourself, though. As I said, with or without tips, I\'ll manage. :)"},{"id":"/2024/02/19/x509-in-polyproto","metadata":{"permalink":"/blog/2024/02/19/x509-in-polyproto","source":"@site/blog/2024-02-19-x509-in-polyproto.md","title":"X.509 in polyproto","description":"This blog post covers a bit about how and why X.509 is used in polyproto, and how we try to make","date":"2024-02-19T00:00:00.000Z","tags":[],"readingTime":6.12,"hasTruncateMarker":true,"authors":[{"name":"bitfl0wer","description":"Lead silly individual","avatar":"https://avatars.githubusercontent.com/u/39242991?v=4","key":"bitfl0wer","page":null}],"frontMatter":{"date":"2024-02-19T00:00:00.000Z","categories":["polyproto","X.509"],"authors":["bitfl0wer"],"title":"X.509 in polyproto"},"unlisted":false,"prevItem":{"title":"Work on polyproto and a \\"vacation\\" \u26f1\ufe0f","permalink":"/blog/2024/03/06/updates-and-vacation"},"nextItem":{"title":"Account migration in polyproto","permalink":"/blog/2024/02/07/account-migration"}},"content":"This blog post covers a bit about how and why X.509 is used in polyproto, and how we try to make\\nthe process of implementing your own server and incorporating it into an existing network a little\\neasier.\\n\\n{/* truncate */}\\n\\n!!! quote \\"Authors\' note\\"\\n\\n    Before knowing and reading about the X.500- and PKCS-series of RFCs, I legitimately thought,\\n    that implementing an own certificate standard for polyproto would be a good idea! Looking back,\\n    this is **incredibly** naive. But learning new things and improving myself is one of the\\n    biggest joys I experience when writing software, so this humbling experience was totally worth\\n    it for me, personally.\\n\\npolyproto is a federation protocol that uses X.509 Public Key Infrastructure (PKI) to prove and\\nfederate your identity across a whole network of decentralized services.\\n\\n## X.509\\n\\nSpecifically, polyproto leverages the already well-documented and widely used X.509 standard at its\\ncore. X.509 was chosen over `OpenPGP` because of its comparative simplicity. The Web of Trust from\\n`OpenPGP` often requires active user input to assign trust levels to users and their keys, which is\\nnot inline with our ideas and goals for user experience in a decentralized system.\\nIdeally, decentralization and federation is as seamless as possible for the end-user,\\nand X.509 with its Certificate Authority (CA for short) model is the better fit for such a goal.\\nIn fact, X.509 can be *so* seamless to the end-user, that you have probably forgotten that you are\\nalready using it right now!\\n\\nHTTPS (SSL/TLS) certificates are likely the most popular form of digital certificate out there,\\nand they\u2019re implemented in a way, where the only time us humans ever have to think about them,\\nis when our browser tells us that a certificate from a website we\u2019re trying to visit, is not\\nvalid anymore.\\n\\nThis popularity is great news for polyproto, because it means that mature tooling for all sorts\\nof programming languages exists *today*, along with tutorials and documentation, teaching potential\\nimplementers how everything works.\\n\\n## How polyproto uses X.509, briefly\\n\\nIn polyproto, home servers act as Certificate Authorities, while each client you connect from has\\nits own end-user Certificate, issued by your home server. With certificates, you can prove your\\nidentity to any person or server at any time. Certificates are also used to verify the integrity\\nof data sent across the polyproto network.\\n\\nIf servers and clients have well-implemented cryptography, it should be *extremely* unlikely - if\\nnot impossible - for non-quantum-based, non-supercomputer-cluster home servers to alter\\nthe contents of a message before passing them on to the recipient.\\n\\n!!! quote \\"Authors note\\"\\n\\n    :nerd: Technically, polyproto and X.509 absolutely support Post-Quantum Hybrid Digital\\n    Signatures. If these Hybrid Digital Signatures use well-made Post-Quantum Signature schemes\\n    and are implemented well, polyproto also offers post-quantum-computing resilience. There\\n    seems to be very little, easy to understand reading material on hybrid schemes out there.\\n    The best/most easy to understand definition or explanation of hybrid schemes I could find is\\n    [this one, in the document \\"A Hybrid Signature Method with Strong Non-Separability\\"](https://www.ietf.org/archive/id/draft-nir-lamps-altcompsigs-00.html#name-non-separability).\\n\\nIn short, clients generate a [PKCS #10](https://datatracker.ietf.org/doc/html/rfc2986) Certificate\\nSigning Request (CSR). This CSR includes some information about the client. In polyprotos case, this\\ninformation is:\\n\\n- session ID\\n- federation ID\\n- algorithm used to generate the public key attached to the CSR\\n- the public key attached to the CSR\\n- a signature which is verifiable using the attached public key, validating all of the\\n  aforementioned information\\n\\nThis CSR is sent to your home server, which verifies this information and in turn responds with a\\npolyproto X.509 Certificate (ID-Cert).\\n\\nHome servers get their root certificate by self-signing a CSR. Unlike actor/client certificates, the\\nhome server root certificate features [X.509 extensions such as the \\"Basic Constraints\\" attribute](https://en.wikipedia.org/wiki/X.509#Extensions_informing_a_specific_usage_of_a_certificate),\\nmarking its certificate as a CA certificate, allowing the home server to sign CSRs\\nusing this certificate.\\n\\n## But it\u2019s not all perfect.\\n\\nRoot Certificates in the context of HTTPS and the modern, SSL/TLS protected web are a big source\\nof centralization. This centralization might be necessary to a degree, but it inevitably means less\\nplurality, and way more hoops to jump through, should you also want to be a CA.\\n\\nTo give context for those who might need it, essentially, every certificate for every website out\\nthere has to be able to be traced back to one of the root certificates installed on your\\ninternet-capable device\'s operating system or web browser. This creates an incredible amount of\\ncentralization, because one Root Certificate Authority is directly responsible for hundreds of\\nthousands, if not millions of websites. This dependency on a few privileged Root CAs\\nhas been monetized, which is why getting an SSL/TLS certificate for your website\\nused to cost you money (and depending on who you are, it might still be that way). Nowadays though,\\n[Let\'s Encrypt](https://letsencrypt.org) exists, offering free SSL/TLS certificates, with the caveat\\nthat these certificates are only valid for three months at a time.\\n\\n## What can we do about this?\\n\\nTo try and keep open polyproto networks to *stay* open for everyone, polyproto should make\\ncentralization to the degree of modern-day SSL/TLS at infeasible.\\n\\nAn approach we are taking is limiting the length of the certification path.\\n\\nIn X.509, to validate and trust a certificate, you must also trust all the other certificates leading up to the Root Certificate of the Certificate Tree.\\n\\n```mermaid\\ngraph LR\\n    A[Root CA] --\x3e B[CA 1]\\n    A --\x3e C[CA 2]\\n    B --\x3e D[Middleman]\\n    D --\x3e E([Leaf Certificate 1])\\n    C --\x3e F([Leaf Certificate 2])\\n```\\n\\n!!! example\\n\\n    To trust `Leaf Certificate 1`, one would have to also trust the certificates held by the\\n    `Middleman CA`, `CA 1` and the `Root CA`.\\n\\nThis path from the certificate you are actually trying to validate to the Root Certificate is\\nreferred to as the certification path. By arbitrarily limiting the length of this path, it becomes\\nharder for one certificate authority to issue and manage a great (1.000.000+) number of\\ncertificates, due to the increasing amount of processing power required to handle web requests and\\nto verify and sign CSRs.\\n\\nIn polyproto, the maximum length of this certification path is 1, meaning a Root Certificate may\\nonly issue leaf certificates. Cutting out middlemen makes it hard to scale to monstrous levels\\nof centralization, as the control one CA can have over the entire network is limited.\\n\\nAll of these factors combined should always make developing or hosting your own home server a\\nviable option.\\n\\n!!! quote \\"Authors note\\"\\n\\n    To clarify, this does not mean that polyproto servers will only be able to handle a small amount\\n    of users, or that polyproto is designed for small-userbase scenarios. A well-implemented\\n    and fast home server implementation should, with the given resources, be able to handle a great\\n    number of registered users. This shallow-depth trust model should aid in stopping trust\\n    hierarchies with great amounts of influence over the network from forming.\\n\\n    However, real-life power distribution scenarios can be be unpredictable, which\\n    means that the efficacy of limiting the certificate path length as a measure to prevent\\n    centralization can only be proven when polyproto is being deployed in the real world.\\n\\n---\\n\\nIf you have any questions or feedback, feel free to reach out to me via email, where you can\\nreach me under `flori@polyphony.chat`. OpenPGP is supported, and my public key can be found on\\n[keys.openpgp.org (click to download pubkey)](https://keys.openpgp.org/vks/v1/by-fingerprint/1AFF5E2D2145C795AB117C2ADCAE4B6877C6FC4E)"},{"id":"/2024/02/07/account-migration","metadata":{"permalink":"/blog/2024/02/07/account-migration","source":"@site/blog/2024-02-07-account-migration.md","title":"Account migration in polyproto","description":"Account migration is an important and difficult thing to get right in federated systems. In this blog","date":"2024-02-07T00:00:00.000Z","tags":[],"readingTime":5.135,"hasTruncateMarker":true,"authors":[{"name":"bitfl0wer","description":"Lead silly individual","avatar":"https://avatars.githubusercontent.com/u/39242991?v=4","key":"bitfl0wer","page":null}],"frontMatter":{"draft":false,"date":"2024-02-07T00:00:00.000Z","categories":["polyproto"],"authors":["bitfl0wer"],"title":"Account migration in polyproto"},"unlisted":false,"prevItem":{"title":"X.509 in polyproto","permalink":"/blog/2024/02/19/x509-in-polyproto"},"nextItem":{"title":"Porting chorus to WebAssembly + Client Update","permalink":"/blog/2023/11/23/webassembly-chorus"}},"content":"Account migration is an important and difficult thing to get right in federated systems. In this blog\\npost, I will outline how I imagine account migration to work in polyproto, and what benefits this\\napproach brings.\\n\\n{/* truncate */}\\n\\n# Account migration in polyproto\\n\\nIt seems that striking a good balance between user experience, convenience and privacy\\nhas been a difficult task for many federated systems, when it comes to account migration.\\npolyprotos\' approach to how data is distributed and stored, and how identities are managed, makes it\\npossible to have a very smooth and secure account migration process.\\n\\n## The problem\\n\\nUsing Mastodon as an example;\\nWhen a user wants to move from one instance to another, they have to\\ncreate a new account on the new instance, and follow all the people they were following on the\\nold account. All the toots and other data from the old account are left behind, and you do not have a\\nway of porting them over to the new account. This is a problem that has been around for a long time,\\nand it is not just a problem with Mastodon, but with many other federated systems as well.\\n\\n## How polyproto works, briefly\\n\\nIn polyproto, your federation ID, e.g. `xenia@example.com`, is what identifies you. If you want to\\nuse this identity on a client, your client will generate a key pair for a certificate signing request,\\nand send this request to your home server. Given that you didn\'t provide any invalid data, your home\\nserver will sign the certificate, and send it back to you.\\n\\nAny data you send to anyone - be it a chat message, a social media post, or anything else - is signed\\nusing your private key. This signature can be verified by anyone using your public key, which is part\\nof the certificate you received from your home server. To check a certificates\' validity, you can\\nask the home server for its root certificate, and verify the signature on the certificate you received.\\n\\nThis means:\\n\\n- All the data you send is cryptographically tied to your identity\\n- Anyone can verify that the data was actually sent by you\\n- Anyone can verify that the data was not tampered with by anyone else\\n- Everybody can verify that you are who you say you are\\n\\nThis is even true when you are sending data to a different server than your home server.\\n\\n## Migrating an account on polyproto\\n\\n### Low data centralization\\n\\nFundamentally, the process of migrating an account in polyproto relies mostly on changing data ownership,\\nrather than moving data around. This works best in scenarios where data is highly distributed, and\\nnot stored in a central location.\\n\\n!!! example\\n\\n    This might be the case in a social chat messaging system\\n    similar to Discord, where messages are stored on the servers of the people hosting the chat rooms.\\n\\nWhen you want to move your account from one server to another, you:\\n\\n1. First, create a new account on the new server\\n2. Then, you configure the new account to back-reference the old account\\n3. Next, if you are able to, you tell your old home server about the move\\n4. Last but not least, you verify to the servers storing your data that you are the same person as\\n  the one who created the old account. The servers then update the data ownership to your new account.\\n  This is done by using your old private key(s), in a way that does not reveal your private key(s) to\\n  anyone else.\\n\\nIf applicable, your friends and followers will also be notified about the move, keeping\\nexisting relationships intact.\\n\\n!!! note\\n\\n    This entire process does not rely on the old server being online.\\n    This means that the process can be completed even if the old server is down, or if the old server\\n    is not cooperating with the user.\\n\\n    However, including the homeserver in the process adds to the\\n    general user experience. If you, for example, have included your federation ID as part of another,\\n    non-polyproto social media profile, the old server can automatically refer people to the new account.\\n\\n### Moving data\\n\\nShould data actually need to be moved, for example when the old server is going to be shut down, or\\nif the centralization of data is higher, the migration process is extended by a few steps:\\n\\n1. Using the old account, your client requests a data export from your old home server.\\n2. The old home server sends you a data export. Your client will check the signatures on the exported\\n   data, to make sure that the data was not tampered with.\\n3. You then import the data into your new account on the new home server.\\n4.\\n\\n## Conclusion\\n\\npolyproto\'s approach to account migration is very user-friendly, and does not require the user to do\\nanything that is not already part of the normal usage of the system. The process is also very secure,\\nas it relies on the cryptographic properties of X.509 certificates, and also works across a highly\\ndistributed data model, which, in my opinion, is how the internet *should* be.\\n\\nThe biggest drawback to this approach is that there are a whole lot of web requests involved.\\nDepending on the amount of data, this can take some minutes or possibly even hours.\\n\\nIt is also worth noting that all of this does not require any new or young technology. polyproto\\nrelies on [X.509 certificates](https://en.wikipedia.org/wiki/X.509), which have been around for a\\nlong time, and are widely used in many different applications. This means that the technology is\\nwell understood, and that there are already many great tools in all sorts of programming languages\\navailable to work with it. From my point of view, there is no need to reinvent the wheel.\\n\\nI hope that this article has given you a good understanding of how account migration works in polyproto.\\nIf you have any questions or feedback, feel free to reach out to me via E-Mail, where I can\\nbe reached under `flori@polyphony.chat`. OpenPGP is supported, and my public key can be found on\\n[keys.openpgp.org (click to download pubkey)](https://keys.openpgp.org/vks/v1/by-fingerprint/1AFF5E2D2145C795AB117C2ADCAE4B6877C6FC4E)"},{"id":"/2023/11/23/webassembly-chorus","metadata":{"permalink":"/blog/2023/11/23/webassembly-chorus","source":"@site/blog/2023-11-23-webassembly-chorus.md","title":"Porting chorus to WebAssembly + Client Update","description":"What the current state of GUI libraries in Rust means for Polyphony and chorus, and why we are porting chorus to WebAssembly.","date":"2023-11-23T00:00:00.000Z","tags":[],"readingTime":1.855,"hasTruncateMarker":true,"authors":[{"name":"bitfl0wer","description":"Lead silly individual","avatar":"https://avatars.githubusercontent.com/u/39242991?v=4","key":"bitfl0wer","page":null}],"frontMatter":{"draft":false,"date":"2023-11-23T00:00:00.000Z","categories":["chorus","polyphony","updates"],"authors":["bitfl0wer"]},"unlisted":false,"prevItem":{"title":"Account migration in polyproto","permalink":"/blog/2024/02/07/account-migration"},"nextItem":{"title":"Getting started with the Polyphony Client","permalink":"/blog/2023/09/02/client-getting-started"}},"content":"What the current state of GUI libraries in Rust means for Polyphony and chorus, and why we are porting chorus to WebAssembly.\\n\\n{/* truncate */}\\n\\nHi all!\\n\\nTo make this part of the post short: The web-based client will be worked on *before* the native one, if there even ever will be one. The reason is that no currently available native Rust GUI library meets the standards I\'d like to see when using it to build an application I am putting my name behind. I\'d like to have\\n- accessibility\\n- great styling\\n- cross compilation\\n- memory safety\\n\\nand the current state of Rust GUIs essentially tells me to \\"pick three\\", which is unacceptable to me. A WebAssembly based application is the best we\'ll get for now, and I am fine with that.\\n\\nCompiling to WebAssembly isn\'t all that easy though: The `wasm32-unknown-unknown` target intentionally makes no assumptions about the environment it is deployed in, and therefore does not provide things like a `net` or `filesystem` implementation (amongst other things). Luckily, adding support for this compilation target only took me a full 40h work week [:)], and we are now the first Rust Discord-API library (that I know of) to support this target.\\n\\nYou might not have yet heard much about WebAssembly: In the past, web developers could only really use three languages - HTML, CSS, and JavaScript - to write code that browsers could understand directly. With WebAssembly, developers can write code in many other languages, then use WASM to convert it into a form the browser can run.\\n\\nThis is particularly helpful for programs that require a lot of computing power, like video games or design software. Before, running such programs in a browser would be slow or impossible. WebAssembly can make these run smoothly, right in your web browser.\\n\\nOverall, WebAssembly is expanding the kinds of applications that can be run on the web, making the web a more flexible and powerful place to work and play. Compiling Chorus for WASM allows us to leverage this fairly new technology and bring all of Rusts benefits into a web context.\\n\\nThe next blog post will likely be about progress with the web-based client. See ya until then! :)"},{"id":"/2023/09/02/client-getting-started","metadata":{"permalink":"/blog/2023/09/02/client-getting-started","source":"@site/blog/2023-09-02-client-getting-started.md","title":"Getting started with the Polyphony Client","description":"{/ truncate /}","date":"2023-09-02T00:00:00.000Z","tags":[],"readingTime":1.505,"hasTruncateMarker":true,"authors":[{"name":"bitfl0wer","description":"Lead silly individual","avatar":"https://avatars.githubusercontent.com/u/39242991?v=4","key":"bitfl0wer","page":null}],"frontMatter":{"draft":false,"date":"2023-09-02T00:00:00.000Z","categories":["polyphony","updates"],"authors":["bitfl0wer"]},"unlisted":false,"prevItem":{"title":"Porting chorus to WebAssembly + Client Update","permalink":"/blog/2023/11/23/webassembly-chorus"},"nextItem":{"title":"chorus Alpha 0.1.0","permalink":"/blog/2023/08/29/chorus-alpha"}},"content":"{/* truncate */}\\n\\nUs labeling Chorus to be in a public-alpha state was really great news for me, for a lot of reasons! It marked a point in Polyphonys history where, after all these months of work, we agreed upon the fact that what we *have* is good enough to be shown to the public, and that\'s always a nice thing when investing so much of your free-time into a project.\\nThe other main reason why this is such a great thing is, because this alpha state (at least to me) means, that the public API is kind-of stable, or at least stable enough so that I, the project lead, can rely upon the fact that all the public methods will not, in fact, be replaced in 4 days.\\n\\nThis means, that I can finally start working on the Client! And I have done that! For the past 2? 3? Days, I\'ve been tinkering around with Iced-rs (a really, really great UI framework for Rust, written in Rust) and the client repository to create the \'skeleton\' of the application. While this is definitely not trivial, especially since I have *no* prior experience in desktop application development, it\'s also not too hard either.\\n\\nWhile Iced is not mature yet, and \\"how-to\\" guides, as well as the promised Iced-book, are still largely missing, the maintainers have done a great job with providing a LOT of code examples and solid rustdocs. It\'s a fun library/framework to work with, and the Elm-inspired approach of dividing up State, Messages, View- and Update-Logic feels really intuitive and seems to make sure that your Application will never end up in an unexpected state.\\n\\nThat\'s all I have for today. Thanks for reading this! Here\'s a video of multi-user login already working ^^\\n\\n<video controls width=\\"auto\\">\\n    <source src=\\"https://cloud.bitfl0wer.de/index.php/s/Gd556SnwAQYejYw/download/screenrec.mp4\\"/>\\n</video>"},{"id":"/2023/08/29/chorus-alpha","metadata":{"permalink":"/blog/2023/08/29/chorus-alpha","source":"@site/blog/2023-08-29-chorus-alpha.md","title":"chorus Alpha 0.1.0","description":"We are alpha now! As of 2 days ago, the first Alpha of Chorus, Version 0.1.0, has been released for everyone to look at and use on crates.io!","date":"2023-08-29T00:00:00.000Z","tags":[],"readingTime":1.36,"hasTruncateMarker":true,"authors":[{"name":"bitfl0wer","description":"Lead silly individual","avatar":"https://avatars.githubusercontent.com/u/39242991?v=4","key":"bitfl0wer","page":null}],"frontMatter":{"draft":false,"date":"2023-08-29T00:00:00.000Z","categories":["chorus","updates"],"authors":["bitfl0wer"]},"unlisted":false,"prevItem":{"title":"Getting started with the Polyphony Client","permalink":"/blog/2023/09/02/client-getting-started"},"nextItem":{"title":"Self-updating structs, moving blog posts to GitHub, and more!","permalink":"/blog/2023/08/17/self-updating-structs"}},"content":"We are alpha now! As of 2 days ago, the first Alpha of Chorus, Version 0.1.0, has been released for everyone to look at and use on crates.io!\\n\\n{/* truncate */}\\n\\nSo, is the library complete now? No. And yes! It\'s, well, complicated... Let me explain!\\n\\nChorus is at a point where I can comfortably say that, if you take voice-support out of the calculation for a bit, the foundation feels rock-solid, easy to work with and easily expandable. However, to stay with our house/building metaphor for a bit, the walls aren\'t painted yet, there\'s barely any furniture and not all of the electrical outlets have been installed yet.\\n\\nOkay, enough with this bad metaphor; What I meant to convey is, that a lot of the API endpoints have not yet been implemented, and there are at least a few points we haven\'t addressed yet - like Gateway Error Handling, to name an example.\\n\\nBut for an early Alpha, this, in my opinion, is absolutely acceptable. Implementing API endpoints is something that probably someone who is entirely new to Rust could do, given that we\'ve streamlined the procedure so much, and the other stuff can comfortably be fixed without having to do any major changes to the internals.\\n\\nI, for one, am currently experimenting around with the Polyphony Client, which, by the way, will likely be written with Iced as a GUI Framework, not GTK. I have no prior experience in GUI/Desktop Application development, but I am feeling more confident than ever and I\'m eager to learn all there is to know about these topics.\\n\\nThat\'s that! Seeya next time.\\nCheers,\\n\\nFlori"},{"id":"/2023/08/17/self-updating-structs","metadata":{"permalink":"/blog/2023/08/17/self-updating-structs","source":"@site/blog/2023-08-17-self-updating-structs.md","title":"Self-updating structs, moving blog posts to GitHub, and more!","description":"Introducing self-updating structs, explaining how they work, and what they are good for. Also, moving blog posts to GitHub, and other improvements.","date":"2023-08-17T00:00:00.000Z","tags":[],"readingTime":2.545,"hasTruncateMarker":true,"authors":[{"name":"bitfl0wer","description":"Lead silly individual","avatar":"https://avatars.githubusercontent.com/u/39242991?v=4","key":"bitfl0wer","page":null}],"frontMatter":{"draft":false,"date":"2023-08-17T00:00:00.000Z","categories":["chorus","updates"],"authors":["bitfl0wer"]},"unlisted":false,"prevItem":{"title":"chorus Alpha 0.1.0","permalink":"/blog/2023/08/29/chorus-alpha"}},"content":"Introducing self-updating structs, explaining how they work, and what they are good for. Also, moving blog posts to GitHub, and other improvements.\\n\\n{/* truncate */}\\n\\nIt has been a while since the last update post - 1 month to be precise! I haven\'t gotten around to writing one of these, mostly because of personal time- and energy constraints. However, now that these resources are finally replenishing again, I figured that it is once again time!\\n\\n## Moving Blog Posts to GitHub\\n\\nThis is a pretty self-explanatory point. I thought, that opencollective would find more use by me and other polyphony-curious folk, however, this didn\'t go as planned. Also, opencollective made their Discord embeds really poopy, which is why I am moving all the blog posts over to GitHub.\\n\\n## A big one: Self-updating structs\\n\\nIdeally, you want entities like Channels, Guilds, or Users to react to Gateway events. A Gateway event is basically a message from Spacebar/Discord to you, which says: \\"Hey, User `x` has changed their name to `y`!\\". If you can reflect those changes immediately within your code, you save yourself from having to make a lot of requests and potentially getting rate-limited.\\n\\nThis is exactly what Self-updating structs set out to solve. The first implementation was done by @SpecificProtagonist and me (thank you a lot again, btw) on the 21st of July. However: This implementation, being in its\' infancy, has had some design flaws, which to me made pretty clear, that this whole thing needed to be thought through a little better.\\n\\nThe second iteration of these Self-updating structs was finished... today, actually, by me. It saves memory compared to the first iteration by storing unique objects only once, instead of `n = how many times they are being referenced`-times. While this way of doing things is really efficient, it also has been a pain in the ass to make, which is precisely the reason why this took me so long. I\'ve learned a lot along the way though.\\n\\nThe public API has also gotten a *lot* better in \\"v2\\". This is mostly because I am a big believer in writing tests for your code, and through writing what are essentialy real-world-simulation-examples, I noticed how repetitive or stupid some things were, and thus could improve upon them.\\n\\nHaving this whole thing finished is a big relief. This self-updating thing is an essential feature for any Discord/Spacebar compatible library, and I think that we implemented it very nicely.\\n\\n## Documentation and other improvements\\n\\n@kozabrada123 took it upon himself to re-write a lot of the codes\' Documentation. Thanks for that! This will massively improve the ease of use of this library - both when developing *for* and *with* it. koza also improved our CI/CT pipeline by incorporating build-caching into it, which speeds up builds.\\n\\nThis has been the last month of Polyphony. In the coming weeks, I will be working on\\n- Implementing self-updating-struct behavior for every struct which needs it\\n- Fixing bugs\\n- Adding more features, like emojis, 2FA, Guild Settings, etc.!\\n\\nSee ya next time!"}]}}')}}]);