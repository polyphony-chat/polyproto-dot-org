"use strict";(self.webpackChunkpolyproto_dot_org=self.webpackChunkpolyproto_dot_org||[]).push([[8037],{6065:e=>{e.exports=JSON.parse('{"permalink":"/blog/2024/02/19/x509-in-polyproto","source":"@site/blog/2024-02-19-x509-in-polyproto.md","title":"X.509 in polyproto","description":"This blog post covers a bit about how and why X.509 is used in polyproto, and how we try to make the","date":"2024-02-19T00:00:00.000Z","tags":[],"readingTime":6.41,"hasTruncateMarker":false,"authors":[{"name":"bitfl0wer","description":"Lead silly individual","avatar":"https://avatars.githubusercontent.com/u/39242991?v=4","key":"bitfl0wer","page":null}],"frontMatter":{"date":"2024-02-19T00:00:00.000Z","categories":["polyproto","X.509"],"authors":["bitfl0wer"],"title":"X.509 in polyproto"},"unlisted":false,"prevItem":{"title":"Work on polyproto and a \\"vacation\\" \u26f1\ufe0f","permalink":"/blog/2024/03/06/updates-and-vacation"},"nextItem":{"title":"Account migration in polyproto","permalink":"/blog/2024/02/07/account-migration"}}')},6806:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>n,toc:()=>h});var n=o(6065),i=o(4848),r=o(8453);const a={date:new Date("2024-02-19T00:00:00.000Z"),categories:["polyproto","X.509"],authors:["bitfl0wer"],title:"X.509 in polyproto"},s="Certificates, please: X.509 in polyproto",l={authorsImageUrls:[void 0]},h=[{value:"X.509",id:"x509",level:2},{value:"How polyproto uses X.509, briefly",id:"how-polyproto-uses-x509-briefly",level:2},{value:"But it&#39;s not all perfect",id:"but-its-not-all-perfect",level:2},{value:"What can we do about this?",id:"what-can-we-do-about-this",level:2}];function c(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",hr:"hr",li:"li",mermaid:"mermaid",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"This blog post covers a bit about how and why X.509 is used in polyproto, and how we try to make the\nprocess of implementing your own server and incorporating it into an existing network a little\neasier."}),"\n",(0,i.jsx)(t.p,{children:"{/_ truncate _/}"}),"\n",(0,i.jsx)(t.p,{children:':::quote "Authors\' note"'}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"Before knowing and reading about the X.500- and PKCS-series of RFCs, I legitimately thought,\nthat implementing an own certificate standard for polyproto would be a good idea! Looking back,\nthis is **incredibly** naive. But learning new things and improving myself is one of the\nbiggest joys I experience when writing software, so this humbling experience was totally worth\nit for me, personally.\n"})}),"\n",(0,i.jsx)(t.p,{children:"polyproto is a federation protocol that uses X.509 Public Key Infrastructure (PKI) to prove and\nfederate your identity across a whole network of decentralized services."}),"\n",(0,i.jsx)(t.h2,{id:"x509",children:"X.509"}),"\n",(0,i.jsxs)(t.p,{children:["Specifically, polyproto leverages the already well-documented and widely used X.509 standard at its\ncore. X.509 was chosen over ",(0,i.jsx)(t.code,{children:"OpenPGP"})," because of its comparative simplicity. The Web of Trust from\n",(0,i.jsx)(t.code,{children:"OpenPGP"})," often requires active user input to assign trust levels to users and their keys, which is\nnot inline with our ideas and goals for user experience in a decentralized system. Ideally,\ndecentralization and federation is as seamless as possible for the end-user, and X.509 with its\nCertificate Authority (CA for short) model is the better fit for such a goal. In fact, X.509 can be\n",(0,i.jsx)(t.em,{children:"so"})," seamless to the end-user, that you have probably forgotten that you are already using it right\nnow!"]}),"\n",(0,i.jsx)(t.p,{children:"HTTPS (SSL/TLS) certificates are likely the most popular form of digital certificate out there, and\nthey're implemented in a way, where the only time us humans ever have to think about them, is when\nour browser tells us that a certificate from a website we're trying to visit, is not valid anymore."}),"\n",(0,i.jsxs)(t.p,{children:["This popularity is great news for polyproto, because it means that mature tooling for all sorts of\nprogramming languages exists ",(0,i.jsx)(t.em,{children:"today"}),", along with tutorials and documentation, teaching potential\nimplementers how everything works."]}),"\n",(0,i.jsx)(t.h2,{id:"how-polyproto-uses-x509-briefly",children:"How polyproto uses X.509, briefly"}),"\n",(0,i.jsx)(t.p,{children:"In polyproto, home servers act as Certificate Authorities, while each client you connect from has\nits own end-user Certificate, issued by your home server. With certificates, you can prove your\nidentity to any person or server at any time. Certificates are also used to verify the integrity of\ndata sent across the polyproto network."}),"\n",(0,i.jsxs)(t.p,{children:["If servers and clients have well-implemented cryptography, it should be ",(0,i.jsx)(t.em,{children:"extremely"})," unlikely - if\nnot impossible - for non-quantum-based, non-supercomputer-cluster home servers to alter the contents\nof a message before passing them on to the recipient."]}),"\n",(0,i.jsx)(t.p,{children:':::quote "Authors note"'}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:':nerd: Technically, polyproto and X.509 absolutely support Post-Quantum Hybrid Digital\nSignatures. If these Hybrid Digital Signatures use well-made Post-Quantum Signature schemes\nand are implemented well, polyproto also offers post-quantum-computing resilience. There\nseems to be very little, easy to understand reading material on hybrid schemes out there.\nThe best/most easy to understand definition or explanation of hybrid schemes I could find is\n[this one, in the document "A Hybrid Signature Method with Strong Non-Separability"](https://www.ietf.org/archive/id/draft-nir-lamps-altcompsigs-00.html#name-non-separability).\n'})}),"\n",(0,i.jsxs)(t.p,{children:["In short, clients generate a ",(0,i.jsx)(t.a,{href:"https://datatracker.ietf.org/doc/html/rfc2986",children:"PKCS #10"})," Certificate\nSigning Request (CSR). This CSR includes some information about the client. In polyprotos case, this\ninformation is:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"session ID"}),"\n",(0,i.jsx)(t.li,{children:"federation ID"}),"\n",(0,i.jsx)(t.li,{children:"algorithm used to generate the public key attached to the CSR"}),"\n",(0,i.jsx)(t.li,{children:"the public key attached to the CSR"}),"\n",(0,i.jsx)(t.li,{children:"a signature which is verifiable using the attached public key, validating all of the\naforementioned information"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"This CSR is sent to your home server, which verifies this information and in turn responds with a\npolyproto X.509 Certificate (ID-Cert)."}),"\n",(0,i.jsxs)(t.p,{children:["Home servers get their root certificate by self-signing a CSR. Unlike actor/client certificates, the\nhome server root certificate features\n",(0,i.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/X.509#Extensions_informing_a_specific_usage_of_a_certificate",children:'X.509 extensions such as the "Basic Constraints" attribute'}),",\nmarking its certificate as a CA certificate, allowing the home server to sign CSRs using this\ncertificate."]}),"\n",(0,i.jsx)(t.h2,{id:"but-its-not-all-perfect",children:"But it's not all perfect"}),"\n",(0,i.jsx)(t.p,{children:"Root Certificates in the context of HTTPS and the modern, SSL/TLS protected web are a big source of\ncentralization. This centralization might be necessary to a degree, but it inevitably means less\nplurality, and way more hoops to jump through, should you also want to be a CA."}),"\n",(0,i.jsxs)(t.p,{children:["To give context for those who might need it, essentially, every certificate for every website out\nthere has to be able to be traced back to one of the root certificates installed on your\ninternet-capable device's operating system or web browser. This creates an incredible amount of\ncentralization, because one Root Certificate Authority is directly responsible for hundreds of\nthousands, if not millions of websites. This dependency on a few privileged Root CAs has been\nmonetized, which is why getting an SSL/TLS certificate for your website used to cost you money (and\ndepending on who you are, it might still be that way). Nowadays though,\n",(0,i.jsx)(t.a,{href:"https://letsencrypt.org",children:"Let's Encrypt"})," exists, offering free SSL/TLS certificates, with the caveat\nthat these certificates are only valid for three months at a time."]}),"\n",(0,i.jsx)(t.h2,{id:"what-can-we-do-about-this",children:"What can we do about this?"}),"\n",(0,i.jsxs)(t.p,{children:["To try and keep open polyproto networks to ",(0,i.jsx)(t.em,{children:"stay"})," open for everyone, polyproto should make\ncentralization to the degree of modern-day SSL/TLS at infeasible."]}),"\n",(0,i.jsx)(t.p,{children:"An approach we are taking is limiting the length of the certification path."}),"\n",(0,i.jsx)(t.p,{children:"In X.509, to validate and trust a certificate, you must also trust all the other certificates\nleading up to the Root Certificate of the Certificate Tree."}),"\n",(0,i.jsx)(t.mermaid,{value:"graph LR\n    A[Root CA] --\x3e B[CA 1]\n    A --\x3e C[CA 2]\n    B --\x3e D[Middleman]\n    D --\x3e E([Leaf Certificate 1])\n    C --\x3e F([Leaf Certificate 2])"}),"\n",(0,i.jsxs)(t.admonition,{title:"Example",type:"tip",children:[(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"To trust `Leaf Certificate 1`, one would have to also trust the certificates held by the\n`Middleman CA`, `CA 1` and the `Root CA`.\n"})}),(0,i.jsx)(t.p,{children:"This path from the certificate you are actually trying to validate to the Root Certificate is\nreferred to as the certification path. By arbitrarily limiting the length of this path, it becomes\nharder for one certificate authority to issue and manage a great (1.000.000+) number of\ncertificates, due to the increasing amount of processing power required to handle web requests and\nto verify and sign CSRs."}),(0,i.jsx)(t.p,{children:"In polyproto, the maximum length of this certification path is 1, meaning a Root Certificate may\nonly issue leaf certificates. Cutting out middlemen makes it hard to scale to monstrous levels of\ncentralization, as the control one CA can have over the entire network is limited."}),(0,i.jsx)(t.p,{children:"All of these factors combined should always make developing or hosting your own home server a viable\noption."}),(0,i.jsx)(t.p,{children:':::quote "Authors note"'}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"To clarify, this does not mean that polyproto servers will only be able to handle a small amount\nof users, or that polyproto is designed for small-userbase scenarios. A well-implemented\nand fast home server implementation should, with the given resources, be able to handle a great\nnumber of registered users. This shallow-depth trust model should aid in stopping trust\nhierarchies with great amounts of influence over the network from forming.\n\nHowever, real-life power distribution scenarios can be be unpredictable, which\nmeans that the efficacy of limiting the certificate path length as a measure to prevent\ncentralization can only be proven when polyproto is being deployed in the real world.\n"})}),(0,i.jsx)(t.hr,{}),(0,i.jsxs)(t.p,{children:["If you have any questions or feedback, feel free to reach out to me via email, where you can reach\nme under ",(0,i.jsx)(t.code,{children:"flori@polyphony.chat"}),". OpenPGP is supported, and my public key can be found on\n",(0,i.jsx)(t.a,{href:"https://keys.openpgp.org/vks/v1/by-fingerprint/1AFF5E2D2145C795AB117C2ADCAE4B6877C6FC4E",children:"keys.openpgp.org"})]})]})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>a,x:()=>s});var n=o(6540);const i={},r=n.createContext(i);function a(e){const t=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);