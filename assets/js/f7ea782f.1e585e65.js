"use strict";(self.webpackChunkpolyproto_docs=self.webpackChunkpolyproto_docs||[]).push([[6653],{3591:e=>{e.exports=JSON.parse('{"permalink":"/blog/2023/08/17/self-updating-structs","source":"@site/blog/2023-08-17-self-updating-structs.md","title":"Self-updating structs, moving blog posts to GitHub, and more!","description":"Introducing self-updating structs, explaining how they work, and what they are good for. Also, moving blog posts to GitHub, and other improvements.","date":"2023-08-17T00:00:00.000Z","tags":[],"readingTime":2.545,"hasTruncateMarker":true,"authors":[{"name":"bitfl0wer","description":"Lead silly individual","avatar":"https://avatars.githubusercontent.com/u/39242991?v=4","key":"bitfl0wer","page":null}],"frontMatter":{"draft":false,"date":"2023-08-17T00:00:00.000Z","categories":["chorus","updates"],"authors":["bitfl0wer"]},"unlisted":false,"prevItem":{"title":"chorus Alpha 0.1.0","permalink":"/blog/2023/08/29/chorus-alpha"}}')},6312:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>a,metadata:()=>n,toc:()=>h});var n=o(3591),i=o(4848),s=o(8453);const a={draft:!1,date:new Date("2023-08-17T00:00:00.000Z"),categories:["chorus","updates"],authors:["bitfl0wer"]},r="Self-updating structs, moving blog posts to GitHub, and more!",l={authorsImageUrls:[void 0]},h=[{value:"Moving Blog Posts to GitHub",id:"moving-blog-posts-to-github",level:2},{value:"A big one: Self-updating structs",id:"a-big-one-self-updating-structs",level:2},{value:"Documentation and other improvements",id:"documentation-and-other-improvements",level:2}];function d(e){const t={code:"code",em:"em",h2:"h2",li:"li",p:"p",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"Introducing self-updating structs, explaining how they work, and what they are good for. Also, moving blog posts to GitHub, and other improvements."}),"\n","\n",(0,i.jsx)(t.p,{children:"It has been a while since the last update post - 1 month to be precise! I haven't gotten around to writing one of these, mostly because of personal time- and energy constraints. However, now that these resources are finally replenishing again, I figured that it is once again time!"}),"\n",(0,i.jsx)(t.h2,{id:"moving-blog-posts-to-github",children:"Moving Blog Posts to GitHub"}),"\n",(0,i.jsx)(t.p,{children:"This is a pretty self-explanatory point. I thought, that opencollective would find more use by me and other polyphony-curious folk, however, this didn't go as planned. Also, opencollective made their Discord embeds really poopy, which is why I am moving all the blog posts over to GitHub."}),"\n",(0,i.jsx)(t.h2,{id:"a-big-one-self-updating-structs",children:"A big one: Self-updating structs"}),"\n",(0,i.jsxs)(t.p,{children:['Ideally, you want entities like Channels, Guilds, or Users to react to Gateway events. A Gateway event is basically a message from Spacebar/Discord to you, which says: "Hey, User ',(0,i.jsx)(t.code,{children:"x"})," has changed their name to ",(0,i.jsx)(t.code,{children:"y"}),'!". If you can reflect those changes immediately within your code, you save yourself from having to make a lot of requests and potentially getting rate-limited.']}),"\n",(0,i.jsx)(t.p,{children:"This is exactly what Self-updating structs set out to solve. The first implementation was done by @SpecificProtagonist and me (thank you a lot again, btw) on the 21st of July. However: This implementation, being in its' infancy, has had some design flaws, which to me made pretty clear, that this whole thing needed to be thought through a little better."}),"\n",(0,i.jsxs)(t.p,{children:["The second iteration of these Self-updating structs was finished... today, actually, by me. It saves memory compared to the first iteration by storing unique objects only once, instead of ",(0,i.jsx)(t.code,{children:"n = how many times they are being referenced"}),"-times. While this way of doing things is really efficient, it also has been a pain in the ass to make, which is precisely the reason why this took me so long. I've learned a lot along the way though."]}),"\n",(0,i.jsxs)(t.p,{children:["The public API has also gotten a ",(0,i.jsx)(t.em,{children:"lot"}),' better in "v2". This is mostly because I am a big believer in writing tests for your code, and through writing what are essentialy real-world-simulation-examples, I noticed how repetitive or stupid some things were, and thus could improve upon them.']}),"\n",(0,i.jsx)(t.p,{children:"Having this whole thing finished is a big relief. This self-updating thing is an essential feature for any Discord/Spacebar compatible library, and I think that we implemented it very nicely."}),"\n",(0,i.jsx)(t.h2,{id:"documentation-and-other-improvements",children:"Documentation and other improvements"}),"\n",(0,i.jsxs)(t.p,{children:["@kozabrada123 took it upon himself to re-write a lot of the codes' Documentation. Thanks for that! This will massively improve the ease of use of this library - both when developing ",(0,i.jsx)(t.em,{children:"for"})," and ",(0,i.jsx)(t.em,{children:"with"})," it. koza also improved our CI/CT pipeline by incorporating build-caching into it, which speeds up builds."]}),"\n",(0,i.jsx)(t.p,{children:"This has been the last month of Polyphony. In the coming weeks, I will be working on"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Implementing self-updating-struct behavior for every struct which needs it"}),"\n",(0,i.jsx)(t.li,{children:"Fixing bugs"}),"\n",(0,i.jsx)(t.li,{children:"Adding more features, like emojis, 2FA, Guild Settings, etc.!"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"See ya next time!"})]})}function c(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>a,x:()=>r});var n=o(6540);const i={},s=n.createContext(i);function a(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);